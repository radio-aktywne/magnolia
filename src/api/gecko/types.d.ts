/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/ping": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Ping
     * @description Ping.
     */
    get: operations["PingPing"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    /**
     * Ping headers
     * @description Ping headers.
     */
    head: operations["PingHeadping"];
    patch?: never;
    trace?: never;
  };
  "/records/{event}/{start}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download record
     * @description Download a record.
     */
    get: operations["RecordsEventStartDownload"];
    /**
     * Upload record
     * @description Upload a record.
     */
    put: operations["RecordsEventStartUpload"];
    post?: never;
    /**
     * Delete record
     * @description Delete a record.
     */
    delete: operations["RecordsEventStartDelete"];
    options?: never;
    /**
     * Download record headers
     * @description Download record headers.
     */
    head: operations["RecordsEventStartHeaddownload"];
    patch?: never;
    trace?: never;
  };
  "/records/{event}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List records
     * @description List records.
     */
    get: operations["RecordsEventList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Record */
    Record: {
      /**
       * Format: uuid
       * @description Identifier of the event.
       */
      event: string;
      /**
       * Format: date-time
       * @description Start time of the event instance in event timezone.
       */
      start: string;
    };
    /** RecordList */
    RecordList: {
      /** @description Total number of records that match the request. */
      count: number;
      /** @description Maximum number of returned records. */
      limit?: null | number;
      /** @description Number of skipped records. */
      offset?: null | number;
      /** @description List of records. */
      records: components["schemas"]["Record"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  PingPing: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          "cache-control"?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
    };
  };
  PingHeadping: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          "cache-control"?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
    };
  };
  RecordsEventStartDownload: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the event. */
        event: string;
        /** @description Start time of the event instance in event timezone. */
        start: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Stream Response */
      200: {
        headers: {
          /** @description File size in bytes */
          "content-length"?: string;
          /** @description Last modified data-time in RFC 2822 format */
          "last-modified"?: string;
          /** @description Entity tag */
          etag?: string;
          /** @description Last modified. */
          "Last-Modified"?: unknown;
          /** @description Content length. */
          "Content-Length"?: unknown;
          /** @description Entity tag. */
          ETag?: unknown;
          /** @description Content type. */
          "Content-Type"?: unknown;
          [name: string]: unknown;
        };
        content: {
          "": string;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  RecordsEventStartUpload: {
    parameters: {
      query?: never;
      header: {
        /** @description Type of the record data. */
        "Content-Type": string;
      };
      path: {
        /** @description Identifier of the event. */
        event: string;
        /** @description Start time of the event instance in event timezone. */
        start: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  RecordsEventStartDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the event. */
        event: string;
        /** @description Start time of the event instance in event timezone. */
        start: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  RecordsEventStartHeaddownload: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the event. */
        event: string;
        /** @description Start time of the event instance in event timezone. */
        start: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          /** @description Last modified. */
          "Last-Modified"?: unknown;
          /** @description Content length. */
          "Content-Length"?: unknown;
          /** @description Entity tag. */
          ETag?: unknown;
          /** @description Content type. */
          "Content-Type"?: unknown;
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  RecordsEventList: {
    parameters: {
      query?: {
        /** @description Only list records after this time (in event timezone). */
        after?: null | string;
        /** @description Only list records before this time (in event timezone). */
        before?: null | string;
        /** @description Maximum number of records to return. */
        limit?: null | number;
        /** @description Number of records to skip. */
        offset?: null | number;
        /** @description Order to apply to the results. */
        order?: "asc" | "desc" | null;
      };
      header?: never;
      path: {
        /** @description Identifier of the event to list records for. */
        event: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecordList"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
}
